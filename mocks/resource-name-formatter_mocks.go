// Code generated by MockGen. DO NOT EDIT.
// Source: utils/resource-name-formatter.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockResourceNameFormatter is a mock of ResourceNameFormatter interface.
type MockResourceNameFormatter struct {
	ctrl     *gomock.Controller
	recorder *MockResourceNameFormatterMockRecorder
}

// MockResourceNameFormatterMockRecorder is the mock recorder for MockResourceNameFormatter.
type MockResourceNameFormatterMockRecorder struct {
	mock *MockResourceNameFormatter
}

// NewMockResourceNameFormatter creates a new mock instance.
func NewMockResourceNameFormatter(ctrl *gomock.Controller) *MockResourceNameFormatter {
	mock := &MockResourceNameFormatter{ctrl: ctrl}
	mock.recorder = &MockResourceNameFormatterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceNameFormatter) EXPECT() *MockResourceNameFormatterMockRecorder {
	return m.recorder
}

// Format mocks base method.
func (m *MockResourceNameFormatter) Format(name string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Format", name)
	ret0, _ := ret[0].(string)
	return ret0
}

// Format indicates an expected call of Format.
func (mr *MockResourceNameFormatterMockRecorder) Format(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Format", reflect.TypeOf((*MockResourceNameFormatter)(nil).Format), name)
}

// UndoFormat mocks base method.
func (m *MockResourceNameFormatter) UndoFormat(name string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UndoFormat", name)
	ret0, _ := ret[0].(string)
	return ret0
}

// UndoFormat indicates an expected call of UndoFormat.
func (mr *MockResourceNameFormatterMockRecorder) UndoFormat(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UndoFormat", reflect.TypeOf((*MockResourceNameFormatter)(nil).UndoFormat), name)
}
